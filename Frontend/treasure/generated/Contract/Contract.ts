// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ClubCreated extends ethereum.Event {
  get params(): ClubCreated__Params {
    return new ClubCreated__Params(this);
  }
}

export class ClubCreated__Params {
  _event: ClubCreated;

  constructor(event: ClubCreated) {
    this._event = event;
  }

  get clubId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get CID(): string {
    return this._event.parameters[2].value.toString();
  }

  get creator(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class ClubInfoEvent extends ethereum.Event {
  get params(): ClubInfoEvent__Params {
    return new ClubInfoEvent__Params(this);
  }
}

export class ClubInfoEvent__Params {
  _event: ClubInfoEvent;

  constructor(event: ClubInfoEvent) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get memberCounter(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get proposalCounter(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get pool(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get CID(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class ProposalCreated extends ethereum.Event {
  get params(): ProposalCreated__Params {
    return new ProposalCreated__Params(this);
  }
}

export class ProposalCreated__Params {
  _event: ProposalCreated;

  constructor(event: ProposalCreated) {
    this._event = event;
  }

  get clubId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get destination(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get description(): string {
    return this._event.parameters[5].value.toString();
  }

  get Cid(): string {
    return this._event.parameters[6].value.toString();
  }
}

export class ProposalVoted extends ethereum.Event {
  get params(): ProposalVoted__Params {
    return new ProposalVoted__Params(this);
  }
}

export class ProposalVoted__Params {
  _event: ProposalVoted;

  constructor(event: ProposalVoted) {
    this._event = event;
  }

  get clubId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get vote(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class Contract__getClubByIdResultValue0Struct extends ethereum.Tuple {
  get clubId(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get memberCount(): BigInt {
    return this[2].toBigInt();
  }

  get proposalCount(): BigInt {
    return this[3].toBigInt();
  }

  get pool(): BigInt {
    return this[4].toBigInt();
  }

  get CID(): string {
    return this[5].toString();
  }
}

export class Contract__getMyClubsResultValue0Struct extends ethereum.Tuple {
  get clubId(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get memberCount(): BigInt {
    return this[2].toBigInt();
  }

  get proposalCount(): BigInt {
    return this[3].toBigInt();
  }

  get pool(): BigInt {
    return this[4].toBigInt();
  }

  get CID(): string {
    return this[5].toString();
  }
}

export class Contract__getProposalByIdResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get creator(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get destination(): Address {
    return this[3].toAddress();
  }

  get status(): string {
    return this[4].toString();
  }

  get description(): string {
    return this[5].toString();
  }

  get votesFor(): BigInt {
    return this[6].toBigInt();
  }

  get votesAgainst(): BigInt {
    return this[7].toBigInt();
  }

  get proposedAt(): BigInt {
    return this[8].toBigInt();
  }

  get proposalExpireAt(): BigInt {
    return this[9].toBigInt();
  }

  get Cid(): string {
    return this[10].toString();
  }
}

export class Contract__getProposalsByClubResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get creator(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get destination(): Address {
    return this[3].toAddress();
  }

  get status(): string {
    return this[4].toString();
  }

  get description(): string {
    return this[5].toString();
  }

  get votesFor(): BigInt {
    return this[6].toBigInt();
  }

  get votesAgainst(): BigInt {
    return this[7].toBigInt();
  }

  get proposedAt(): BigInt {
    return this[8].toBigInt();
  }

  get proposalExpireAt(): BigInt {
    return this[9].toBigInt();
  }

  get Cid(): string {
    return this[10].toString();
  }
}

export class Contract__listClubsResultValue0Struct extends ethereum.Tuple {
  get clubId(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get memberCount(): BigInt {
    return this[2].toBigInt();
  }

  get proposalCount(): BigInt {
    return this[3].toBigInt();
  }

  get pool(): BigInt {
    return this[4].toBigInt();
  }

  get CID(): string {
    return this[5].toString();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  createClub(name: string, Cid: string): BigInt {
    let result = super.call(
      "createClub",
      "createClub(string,string):(uint256)",
      [ethereum.Value.fromString(name), ethereum.Value.fromString(Cid)],
    );

    return result[0].toBigInt();
  }

  try_createClub(name: string, Cid: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createClub",
      "createClub(string,string):(uint256)",
      [ethereum.Value.fromString(name), ethereum.Value.fromString(Cid)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBalanceByClub(userAddress: Address, clubId: BigInt): BigInt {
    let result = super.call(
      "getBalanceByClub",
      "getBalanceByClub(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(userAddress),
        ethereum.Value.fromUnsignedBigInt(clubId),
      ],
    );

    return result[0].toBigInt();
  }

  try_getBalanceByClub(
    userAddress: Address,
    clubId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBalanceByClub",
      "getBalanceByClub(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(userAddress),
        ethereum.Value.fromUnsignedBigInt(clubId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClubById(clubId: BigInt): Contract__getClubByIdResultValue0Struct {
    let result = super.call(
      "getClubById",
      "getClubById(uint256):((uint256,string,uint256,uint256,uint256,string))",
      [ethereum.Value.fromUnsignedBigInt(clubId)],
    );

    return changetype<Contract__getClubByIdResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getClubById(
    clubId: BigInt,
  ): ethereum.CallResult<Contract__getClubByIdResultValue0Struct> {
    let result = super.tryCall(
      "getClubById",
      "getClubById(uint256):((uint256,string,uint256,uint256,uint256,string))",
      [ethereum.Value.fromUnsignedBigInt(clubId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getClubByIdResultValue0Struct>(value[0].toTuple()),
    );
  }

  getMyClubs(): Array<Contract__getMyClubsResultValue0Struct> {
    let result = super.call(
      "getMyClubs",
      "getMyClubs():((uint256,string,uint256,uint256,uint256,string)[])",
      [],
    );

    return result[0].toTupleArray<Contract__getMyClubsResultValue0Struct>();
  }

  try_getMyClubs(): ethereum.CallResult<
    Array<Contract__getMyClubsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getMyClubs",
      "getMyClubs():((uint256,string,uint256,uint256,uint256,string)[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__getMyClubsResultValue0Struct>(),
    );
  }

  getProposalById(
    clubId: BigInt,
    proposalId: BigInt,
  ): Contract__getProposalByIdResultValue0Struct {
    let result = super.call(
      "getProposalById",
      "getProposalById(uint256,uint256):((uint256,address,uint256,address,string,string,uint256,uint256,uint256,uint256,string))",
      [
        ethereum.Value.fromUnsignedBigInt(clubId),
        ethereum.Value.fromUnsignedBigInt(proposalId),
      ],
    );

    return changetype<Contract__getProposalByIdResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getProposalById(
    clubId: BigInt,
    proposalId: BigInt,
  ): ethereum.CallResult<Contract__getProposalByIdResultValue0Struct> {
    let result = super.tryCall(
      "getProposalById",
      "getProposalById(uint256,uint256):((uint256,address,uint256,address,string,string,uint256,uint256,uint256,uint256,string))",
      [
        ethereum.Value.fromUnsignedBigInt(clubId),
        ethereum.Value.fromUnsignedBigInt(proposalId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getProposalByIdResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getProposalsByClub(
    clubId: BigInt,
  ): Array<Contract__getProposalsByClubResultValue0Struct> {
    let result = super.call(
      "getProposalsByClub",
      "getProposalsByClub(uint256):((uint256,address,uint256,address,string,string,uint256,uint256,uint256,uint256,string)[])",
      [ethereum.Value.fromUnsignedBigInt(clubId)],
    );

    return result[0].toTupleArray<Contract__getProposalsByClubResultValue0Struct>();
  }

  try_getProposalsByClub(
    clubId: BigInt,
  ): ethereum.CallResult<
    Array<Contract__getProposalsByClubResultValue0Struct>
  > {
    let result = super.tryCall(
      "getProposalsByClub",
      "getProposalsByClub(uint256):((uint256,address,uint256,address,string,string,uint256,uint256,uint256,uint256,string)[])",
      [ethereum.Value.fromUnsignedBigInt(clubId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__getProposalsByClubResultValue0Struct>(),
    );
  }

  hasVoted(sender: Address, proposalId: BigInt, clubId: BigInt): boolean {
    let result = super.call(
      "hasVoted",
      "hasVoted(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(clubId),
      ],
    );

    return result[0].toBoolean();
  }

  try_hasVoted(
    sender: Address,
    proposalId: BigInt,
    clubId: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasVoted",
      "hasVoted(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(clubId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isClubFull(clubId: BigInt): boolean {
    let result = super.call("isClubFull", "isClubFull(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(clubId),
    ]);

    return result[0].toBoolean();
  }

  try_isClubFull(clubId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isClubFull", "isClubFull(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(clubId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isClubIdExist(clubId: BigInt): boolean {
    let result = super.call("isClubIdExist", "isClubIdExist(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(clubId),
    ]);

    return result[0].toBoolean();
  }

  try_isClubIdExist(clubId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isClubIdExist",
      "isClubIdExist(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(clubId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMemberOfClub(memberAddress: Address, clubId: BigInt): boolean {
    let result = super.call(
      "isMemberOfClub",
      "isMemberOfClub(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(memberAddress),
        ethereum.Value.fromUnsignedBigInt(clubId),
      ],
    );

    return result[0].toBoolean();
  }

  try_isMemberOfClub(
    memberAddress: Address,
    clubId: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMemberOfClub",
      "isMemberOfClub(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(memberAddress),
        ethereum.Value.fromUnsignedBigInt(clubId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isProposalIdExist(proposalId: BigInt, clubId: BigInt): boolean {
    let result = super.call(
      "isProposalIdExist",
      "isProposalIdExist(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(clubId),
      ],
    );

    return result[0].toBoolean();
  }

  try_isProposalIdExist(
    proposalId: BigInt,
    clubId: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isProposalIdExist",
      "isProposalIdExist(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(clubId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isVotingOn(clubId: BigInt, proposalId: BigInt): boolean {
    let result = super.call(
      "isVotingOn",
      "isVotingOn(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(clubId),
        ethereum.Value.fromUnsignedBigInt(proposalId),
      ],
    );

    return result[0].toBoolean();
  }

  try_isVotingOn(
    clubId: BigInt,
    proposalId: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isVotingOn",
      "isVotingOn(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(clubId),
        ethereum.Value.fromUnsignedBigInt(proposalId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  listClubs(): Array<Contract__listClubsResultValue0Struct> {
    let result = super.call(
      "listClubs",
      "listClubs():((uint256,string,uint256,uint256,uint256,string)[])",
      [],
    );

    return result[0].toTupleArray<Contract__listClubsResultValue0Struct>();
  }

  try_listClubs(): ethereum.CallResult<
    Array<Contract__listClubsResultValue0Struct>
  > {
    let result = super.tryCall(
      "listClubs",
      "listClubs():((uint256,string,uint256,uint256,uint256,string)[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__listClubsResultValue0Struct>(),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CloseProposalCall extends ethereum.Call {
  get inputs(): CloseProposalCall__Inputs {
    return new CloseProposalCall__Inputs(this);
  }

  get outputs(): CloseProposalCall__Outputs {
    return new CloseProposalCall__Outputs(this);
  }
}

export class CloseProposalCall__Inputs {
  _call: CloseProposalCall;

  constructor(call: CloseProposalCall) {
    this._call = call;
  }

  get clubId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CloseProposalCall__Outputs {
  _call: CloseProposalCall;

  constructor(call: CloseProposalCall) {
    this._call = call;
  }
}

export class ContributeToClubCall extends ethereum.Call {
  get inputs(): ContributeToClubCall__Inputs {
    return new ContributeToClubCall__Inputs(this);
  }

  get outputs(): ContributeToClubCall__Outputs {
    return new ContributeToClubCall__Outputs(this);
  }
}

export class ContributeToClubCall__Inputs {
  _call: ContributeToClubCall;

  constructor(call: ContributeToClubCall) {
    this._call = call;
  }

  get clubId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ContributeToClubCall__Outputs {
  _call: ContributeToClubCall;

  constructor(call: ContributeToClubCall) {
    this._call = call;
  }
}

export class CreateClubCall extends ethereum.Call {
  get inputs(): CreateClubCall__Inputs {
    return new CreateClubCall__Inputs(this);
  }

  get outputs(): CreateClubCall__Outputs {
    return new CreateClubCall__Outputs(this);
  }
}

export class CreateClubCall__Inputs {
  _call: CreateClubCall;

  constructor(call: CreateClubCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get Cid(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CreateClubCall__Outputs {
  _call: CreateClubCall;

  constructor(call: CreateClubCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateProposalCall extends ethereum.Call {
  get inputs(): CreateProposalCall__Inputs {
    return new CreateProposalCall__Inputs(this);
  }

  get outputs(): CreateProposalCall__Outputs {
    return new CreateProposalCall__Outputs(this);
  }
}

export class CreateProposalCall__Inputs {
  _call: CreateProposalCall;

  constructor(call: CreateProposalCall) {
    this._call = call;
  }

  get clubId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get destination(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get description(): string {
    return this._call.inputValues[3].value.toString();
  }

  get Cid(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class CreateProposalCall__Outputs {
  _call: CreateProposalCall;

  constructor(call: CreateProposalCall) {
    this._call = call;
  }
}

export class ExecuteProposalCall extends ethereum.Call {
  get inputs(): ExecuteProposalCall__Inputs {
    return new ExecuteProposalCall__Inputs(this);
  }

  get outputs(): ExecuteProposalCall__Outputs {
    return new ExecuteProposalCall__Outputs(this);
  }
}

export class ExecuteProposalCall__Inputs {
  _call: ExecuteProposalCall;

  constructor(call: ExecuteProposalCall) {
    this._call = call;
  }

  get clubId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExecuteProposalCall__Outputs {
  _call: ExecuteProposalCall;

  constructor(call: ExecuteProposalCall) {
    this._call = call;
  }
}

export class JoinClubCall extends ethereum.Call {
  get inputs(): JoinClubCall__Inputs {
    return new JoinClubCall__Inputs(this);
  }

  get outputs(): JoinClubCall__Outputs {
    return new JoinClubCall__Outputs(this);
  }
}

export class JoinClubCall__Inputs {
  _call: JoinClubCall;

  constructor(call: JoinClubCall) {
    this._call = call;
  }

  get clubId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class JoinClubCall__Outputs {
  _call: JoinClubCall;

  constructor(call: JoinClubCall) {
    this._call = call;
  }
}

export class LeaveClubCall extends ethereum.Call {
  get inputs(): LeaveClubCall__Inputs {
    return new LeaveClubCall__Inputs(this);
  }

  get outputs(): LeaveClubCall__Outputs {
    return new LeaveClubCall__Outputs(this);
  }
}

export class LeaveClubCall__Inputs {
  _call: LeaveClubCall;

  constructor(call: LeaveClubCall) {
    this._call = call;
  }

  get clubId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LeaveClubCall__Outputs {
  _call: LeaveClubCall;

  constructor(call: LeaveClubCall) {
    this._call = call;
  }
}

export class VoteOnProposalCall extends ethereum.Call {
  get inputs(): VoteOnProposalCall__Inputs {
    return new VoteOnProposalCall__Inputs(this);
  }

  get outputs(): VoteOnProposalCall__Outputs {
    return new VoteOnProposalCall__Outputs(this);
  }
}

export class VoteOnProposalCall__Inputs {
  _call: VoteOnProposalCall;

  constructor(call: VoteOnProposalCall) {
    this._call = call;
  }

  get clubId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get vote(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class VoteOnProposalCall__Outputs {
  _call: VoteOnProposalCall;

  constructor(call: VoteOnProposalCall) {
    this._call = call;
  }
}
